on:
  push:
    tags:
      - "v*"
jobs:
  package:
    strategy:
      matrix:
        go-version: [1.21]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set Version
        run: echo "VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Get Wails dependencies
        run: sudo apt update && sudo apt install -y libgtk-3-dev libwebkit2gtk-4.0-dev
        if: matrix.os == 'ubuntu-latest'
      - name: Get Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest
      - name: Build package macOS
        run: |
          export PATH=${PATH}:`go env GOPATH`/bin
          echo "building on ${{ matrix.os }}"
          mkdir -p ~/.wails
          cp wails.json ~/.wails/
          export LOG_LEVEL=debug
          export GODEBUG=1
          wails build
          echo "converting .app into a .dmg"
          npm install -g appdmg
          appdmg dmg-spec.json blocks.dmg
          zip blocks.zip blocks.dmg
        if: matrix.os == 'macos-latest'
      - name: Build package linux
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          echo "building on ${{ matrix.os }}"
          echo ${{ env.GITHUB_REF }}
          echo ${{ env.GITHUB_HEAD_REF }}
          mkdir -p ~/.wails
          cp wails.json ~/.wails/
          export LOG_LEVEL=debug
          export GODEBUG=1
          wails build
          ls -la /home/runner/work/blocks/blocks/build/bin/blocks
          tar -czvf blocks.tar.gz /home/runner/work/blocks/blocks/build/bin/blocks
          # wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          # chmod +x linuxdeploy*.AppImage
          # ls ./
          # ./linuxdeploy*.AppImage --appdir AppDir --executable ./build/blocks --desktop-file=blocks.AppImage.desktop --icon-file=appicon--512.png --output appimage
        if: matrix.os == 'ubuntu-latest'
      - name: Build package windows
        run: |
          # Retrieve the GOPATH
          $GP = go env GOPATH | Out-String
          $GP = $GP.Trim()
          
          # Update the PATH environment variable to include GOPATH\bin
          $env:path = "$env:path;$GP\bin"
          
          # Echo the OS being used for the build
          echo "building on ${{ matrix.os }}"
          
          # Ensure the .wails directory exists
          $wailsDir = Join-Path -Path $env:HOME -ChildPath ".wails"
          New-Item -ItemType Directory -Path $wailsDir -Force
          
          # Copy wails.json to the .wails directory
          $wailsConfigSrc = Join-Path -Path $env:PWD -ChildPath "wails.json"
          $wailsConfigDest = Join-Path -Path $wailsDir -ChildPath "wails.json"
          Copy-Item -Path $wailsConfigSrc -Destination $wailsConfigDest
          
          # Install MinGW using Chocolatey
          choco install mingw -y
          
          # Build the project using Wails
          wails build
          
          # Compress the build output into a zip file
          $buildDir = Join-Path -Path $env:PWD -ChildPath "build\blocks*"
          $zipDest = Join-Path -Path $env:PWD -ChildPath "blocks.zip"
          Compress-Archive -Path $buildDir -DestinationPath $zipDest
        if: matrix.os == 'windows-latest'
      - name: upload artifact macOS
        uses: actions/upload-artifact@v1
        with:
          name: blocks-macOS
          path: blocks.zip
        if: matrix.os == 'macos-latest'
      - name: upload artifact linux
        uses: actions/upload-artifact@v2-preview
        with:
          name: blocks-linux
          path: blocks.tar.gz
        if: matrix.os == 'ubuntu-latest'
      #      - name: upload artifact linux appimage
      #        uses: actions/upload-artifact@v2-preview
      #        with:
      #          name: blocks-linux-appimage
      #          path: blocks-${{ env.VERSION }}-x86_64.AppImage
      #        if: matrix.os == 'ubuntu-latest'
      - name: upload artifact windows
        uses: actions/upload-artifact@v1
        with:
          name: blocks-windows
          path: blocks.zip
        if: matrix.os == 'windows-latest'

  release:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
          prerelease: true
      - name: Download macOS package
        uses: actions/download-artifact@v1
        with:
          name: blocks-macOS
      - name: Upload macOS package to release
        id: upload-macOS-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./blocks-macOS/blocks.zip
          asset_name: blocks_${{ github.ref }}_macOS.zip
          asset_content_type: application/octet-stream
      - name: Download linux package
        uses: actions/download-artifact@v1
        with:
          name: blocks-linux
      - name: Upload Linux package to release
        id: upload-linux-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./blocks-linux/blocks.tar.gz
          asset_name: blocks_${{ github.ref }}_linux_x86_64.tar.gz
          asset_content_type: application/octet-stream
      - name: Download windows package
        uses: actions/download-artifact@v1
        with:
          name: blocks-windows
      - name: Upload Windows package to release
        id: upload-windows-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./blocks-windows/blocks.zip
          asset_name: blocks_${{ github.ref }}_windows_x86_64.zip
          asset_content_type: application/octet-stream